namespace BlackBox;

// Client->Server - Initial login/registration payload.
table LoginPayload {
    register: bool;
    username: string (required);
    key: string;
}

// Server->Client - Login/registration response payload.
// If success==false then errorMessage is populated with a failure reason.
table LoginAckPayload {
    success: bool;
    errorMessage: string;
    username: string;
    key: string;
}

// Client->Server - Join/create request payload.
table JoinGamePayload {
    createGame: bool;
    inviteCode: string;
}

struct Vec2 {
    x: int;
    y: int;
}

struct BoardMove {
    in: Vec2;
    out: Vec2;
}

table GameBoard {
    visible: bool;
    atomsSubmitted: bool;
    atomLocations: [Vec2]; // Atom locations are not sent to opposing players or spectators until the game is over.
    moves: [BoardMove] (required);
}

table GameSessionPlayer {
    username: string (required);
    online: bool;
}

enum GameSessionStatus: byte {
    SelectingAtoms,
    PlayerATurn,
    PlayerBTurn,
    PlayerAWin,
    PlayerBWin
}

table GameMetadata {
    inviteCode: string (required);
    seatNumber: int; // Seat 0 and 1 are players, seat >= 2 are spectators.
    roster: [GameSessionPlayer] (required); // Players and spectators
    status: GameSessionStatus;

}

table GameSessionState {
    metadata: GameMetadata (required);
    boardA: GameBoard (required);
    boardB: GameBoard (required);
}

// Server->Client - Join/create response payload.
// If success==false then errorMessage is populated with a failure reason.
table JoinGameAckPayload {
    success: bool;
    errorMessage: string;
    inviteCode: string;
    gameState: GameSessionState;
}

// Client->Server - List games request payload.
table ListGamesPayload {}

// Server->Client - List games response payload.
table ListGamesAckPayload {
    success: bool;
    errorMessage: string;
    metadatas: [GameMetadata];
}

// Server->Client - Game state sync payload.
// Data is occluded based on the connection context.
table UpdateGamePayload {
    gameState: GameSessionState;
}

// Client->Server - Submit atom locations (done by both players at the beginning)
table SetAtomsPayload {
    atomLocations: [Vec2];
}

// Client->Server - Submit a move input
table SubmitMovePayload {
    move: Vec2;
}

// Client->Server - Submit a solution guess
table SubmitSolutionPayload {
    atomLocations: [Vec2];
}

union AnyPayload {
    LoginPayload, LoginAckPayload,
    JoinGamePayload, JoinGameAckPayload,
    ListGamesPayload, ListGamesAckPayload,
    UpdateGamePayload,
    SetAtomsPayload, SubmitMovePayload, SubmitSolutionPayload,
}

table Message {
    payload: AnyPayload (required);
}

root_type Message;
